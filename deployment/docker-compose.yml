version: '3.8'

services:
  # Main AG06 Mixer Application
  ag06-mixer:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: ag06-mixer-main
    ports:
      - "8080:8080"  # HTTP API
      - "8081:8081"  # WebSocket for real-time audio
      - "9090:9090"  # Metrics endpoint
    environment:
      - ENVIRONMENT=production
      - AUDIO_LATENCY_TARGET=10
      - ENABLE_MONITORING=true
      - ENABLE_CACHING=true
      - LOG_LEVEL=info
    volumes:
      - ./presets:/app/presets
      - ./logs:/app/logs
    networks:
      - ag06-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Audio Processing Worker (Horizontal Scaling)
  audio-worker:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.worker
    container_name: ag06-audio-worker
    environment:
      - WORKER_TYPE=audio
      - WORKER_ID=${WORKER_ID:-1}
      - REDIS_HOST=redis
      - ENABLE_GPU=false
    networks:
      - ag06-network
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1'
          memory: 1G
    depends_on:
      - redis

  # MIDI Processing Worker
  midi-worker:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.worker
    container_name: ag06-midi-worker
    environment:
      - WORKER_TYPE=midi
      - WORKER_ID=${WORKER_ID:-1}
      - REDIS_HOST=redis
    networks:
      - ag06-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    depends_on:
      - redis

  # Redis for Event Bus and Caching
  redis:
    image: redis:7-alpine
    container_name: ag06-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - ag06-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: ag06-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - ag06-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ag06-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - ag06-network
    depends_on:
      - prometheus

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: ag06-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "6831:6831/udp" # Thrift compact protocol
      - "14268:14268"   # HTTP collector
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - ag06-network

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: ag06-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    networks:
      - ag06-network
    depends_on:
      - ag06-mixer
      - audio-worker

networks:
  ag06-network:
    driver: bridge

volumes:
  redis-data:
  prometheus-data:
  grafana-data: