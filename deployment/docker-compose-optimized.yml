version: '3.8'

services:
  # Main AG06 Mixer Application
  ag06-mixer:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
      args:
        BUILD_MODE: development
    image: ag06-mixer:dev
    container_name: ag06-mixer-main
    ports:
      - "8080:8080"  # HTTP API
      - "8081:8081"  # WebSocket
      - "9090:9090"  # Metrics
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=debug
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PROMETHEUS_PUSHGATEWAY=pushgateway:9091
      - ENABLE_PROFILING=true
      - PERFORMANCE_MODE=optimized
      - AUDIO_LATENCY_TARGET=5
      - MEMORY_LIMIT_MB=2048
      - CPU_LIMIT_PERCENT=80
      - ENABLE_CACHING=true
      - CACHE_TTL=3600
      - BUFFER_POOL_SIZE=100
      - RING_BUFFER_SIZE=65536
      - PARALLEL_WORKERS=4
    volumes:
      - ../ag06_mixer:/app/ag06_mixer:ro
      - ./logs:/app/logs
      - ./profiles:/app/profiles
      - presets-data:/app/presets
    depends_on:
      - redis
      - prometheus
      - grafana
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    networks:
      - ag06-network

  # Audio Processing Worker Pool
  audio-worker:
    image: ag06-mixer:dev
    container_name: ag06-audio-worker
    command: ["python", "-m", "ag06_mixer.workers.audio_worker"]
    environment:
      - WORKER_TYPE=audio
      - WORKER_ID=audio-1
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PROCESSING_THREADS=4
      - BATCH_SIZE=32
      - ENABLE_SIMD=true
    volumes:
      - ../ag06_mixer:/app/ag06_mixer:ro
    depends_on:
      - redis
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1'
          memory: 1G
    networks:
      - ag06-network

  # MIDI Processing Worker Pool
  midi-worker:
    image: ag06-mixer:dev
    container_name: ag06-midi-worker
    command: ["python", "-m", "ag06_mixer.workers.midi_worker"]
    environment:
      - WORKER_TYPE=midi
      - WORKER_ID=midi-1
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PROCESSING_THREADS=2
      - EVENT_QUEUE_SIZE=1024
    volumes:
      - ../ag06_mixer:/app/ag06_mixer:ro
    depends_on:
      - redis
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    networks:
      - ag06-network

  # Redis for caching and message queue
  redis:
    image: redis:7-alpine
    container_name: ag06-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: >
      redis-server
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ag06-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: ag06-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/alerts.yml:/etc/prometheus/alerts.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    depends_on:
      - pushgateway
    networks:
      - ag06-network

  # Prometheus Pushgateway for batch metrics
  pushgateway:
    image: prom/pushgateway:v1.6.2
    container_name: ag06-pushgateway
    ports:
      - "9092:9091"
    networks:
      - ag06-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.0.0
    container_name: ag06-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - ag06-network

  # AlertManager for alert handling
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: ag06-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/config.yml:/etc/alertmanager/config.yml
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    networks:
      - ag06-network

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: ag06-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - ag06-network

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: ag06-cadvisor
    ports:
      - "8082:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - ag06-network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.47
    container_name: ag06-jaeger
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"  # Jaeger UI
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - ag06-network

  # Load testing with Locust
  locust:
    image: locustio/locust
    container_name: ag06-locust
    ports:
      - "8089:8089"
    volumes:
      - ../tests/performance/locustfile.py:/mnt/locust/locustfile.py
    command: -f /mnt/locust/locustfile.py --host http://ag06-mixer:8080
    depends_on:
      - ag06-mixer
    networks:
      - ag06-network

  # Development database for testing
  postgres:
    image: postgres:15-alpine
    container_name: ag06-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=ag06
      - POSTGRES_PASSWORD=ag06pass
      - POSTGRES_DB=ag06_mixer
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ag06"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ag06-network

  # MinIO for object storage (presets, recordings)
  minio:
    image: minio/minio:latest
    container_name: ag06-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - ag06-network

networks:
  ag06-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  alertmanager-data:
    driver: local
  postgres-data:
    driver: local
  minio-data:
    driver: local
  presets-data:
    driver: local