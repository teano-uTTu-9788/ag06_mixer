apiVersion: v1
kind: Namespace
metadata:
  name: ag06-mixer

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: ag06-config
  namespace: ag06-mixer
data:
  audio-latency-target: "10"
  enable-monitoring: "true"
  enable-caching: "true"
  log-level: "info"
  buffer-pool-size: "100"
  ring-buffer-size: "65536"

---
# Secret for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: ag06-secrets
  namespace: ag06-mixer
type: Opaque
data:
  api-key: <base64-encoded-api-key>
  redis-password: <base64-encoded-password>

---
# Main AG06 Mixer Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ag06-mixer
  namespace: ag06-mixer
  labels:
    app: ag06-mixer
    version: v2.0.0
spec:
  replicas: 3
  selector:
    matchLabels:
      app: ag06-mixer
  template:
    metadata:
      labels:
        app: ag06-mixer
        version: v2.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
    spec:
      containers:
      - name: ag06-mixer
        image: ag06-mixer:v2.0.0
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 8081
          name: websocket
        - containerPort: 9090
          name: metrics
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: AUDIO_LATENCY_TARGET
          valueFrom:
            configMapKeyRef:
              name: ag06-config
              key: audio-latency-target
        - name: REDIS_HOST
          value: "redis-service"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ag06-secrets
              key: redis-password
        resources:
          requests:
            memory: "1Gi"
            cpu: "1000m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: presets
          mountPath: /app/presets
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: presets
        persistentVolumeClaim:
          claimName: presets-pvc
      - name: logs
        emptyDir: {}

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ag06-mixer-hpa
  namespace: ag06-mixer
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ag06-mixer
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: audio_latency_ms
      target:
        type: AverageValue
        averageValue: "15"

---
# Service for AG06 Mixer
apiVersion: v1
kind: Service
metadata:
  name: ag06-mixer-service
  namespace: ag06-mixer
  labels:
    app: ag06-mixer
spec:
  type: LoadBalancer
  selector:
    app: ag06-mixer
  ports:
  - name: http
    port: 80
    targetPort: 8080
  - name: websocket
    port: 8081
    targetPort: 8081
  - name: metrics
    port: 9090
    targetPort: 9090

---
# Audio Worker Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: audio-worker
  namespace: ag06-mixer
spec:
  replicas: 5
  selector:
    matchLabels:
      app: audio-worker
  template:
    metadata:
      labels:
        app: audio-worker
    spec:
      containers:
      - name: audio-worker
        image: ag06-mixer-worker:v2.0.0
        env:
        - name: WORKER_TYPE
          value: "audio"
        - name: REDIS_HOST
          value: "redis-service"
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"

---
# MIDI Worker Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: midi-worker
  namespace: ag06-mixer
spec:
  replicas: 3
  selector:
    matchLabels:
      app: midi-worker
  template:
    metadata:
      labels:
        app: midi-worker
    spec:
      containers:
      - name: midi-worker
        image: ag06-mixer-worker:v2.0.0
        env:
        - name: WORKER_TYPE
          value: "midi"
        - name: REDIS_HOST
          value: "redis-service"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"

---
# Redis StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: ag06-mixer
spec:
  serviceName: redis-service
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-data
          mountPath: /data
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: ag06-mixer
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379

---
# PersistentVolumeClaim for Presets
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: presets-pvc
  namespace: ag06-mixer
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ag06-mixer-ingress
  namespace: ag06-mixer
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/websocket-services: "ag06-mixer-service"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - ag06mixer.example.com
    secretName: ag06-mixer-tls
  rules:
  - host: ag06mixer.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ag06-mixer-service
            port:
              number: 80
      - path: /ws
        pathType: Prefix
        backend:
          service:
            name: ag06-mixer-service
            port:
              number: 8081