name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Environment to deploy to'
        required: false
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  CACHE_VERSION: v1

jobs:
  # ============================================================================
  # Linting and Formatting
  # ============================================================================
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff black isort mypy
          [ -f requirements-dev.txt ] && pip install -r requirements-dev.txt || true
      
      - name: Run Python linters
        run: |
          ruff check .
          black --check .
          isort --check-only .
          mypy . || true
      
      - name: Lint shell scripts
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck
          find . -type f -name "*.sh" -exec shellcheck {} \;
      
      - name: Check Dockerfile
        if: hashFiles('Dockerfile') != ''
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile

  # ============================================================================
  # Testing
  # ============================================================================
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.10', '3.11']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.npm
            .venv
          key: ${{ runner.os }}-deps-${{ hashFiles('**/requirements*.txt', '**/package*.json') }}
          restore-keys: |
            ${{ runner.os }}-deps-
      
      - name: Install dependencies
        run: |
          # Python dependencies
          python -m venv .venv
          source .venv/bin/activate || .venv\\Scripts\\activate
          python -m pip install --upgrade pip
          [ -f requirements.txt ] && pip install -r requirements.txt || true
          [ -f requirements-dev.txt ] && pip install -r requirements-dev.txt || true
          pip install pytest pytest-cov pytest-asyncio
          
          # Node dependencies
          [ -f package.json ] && npm ci || true
      
      - name: Run Python tests
        run: |
          source .venv/bin/activate || .venv\\Scripts\\activate
          pytest -v --cov=. --cov-report=xml --cov-report=term-missing
      
      - name: Run Node tests
        if: hashFiles('package.json') != ''
        run: npm test
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-${{ matrix.os }}-py${{ matrix.python-version }}

  # ============================================================================
  # Security Scanning
  # ============================================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================================================
  # Build
  # ============================================================================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        if: hashFiles('Dockerfile') != ''
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ github.repository }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/image.tar
      
      - name: Upload Docker image
        if: hashFiles('Dockerfile') != ''
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: /tmp/image.tar
          retention-days: 1
      
      - name: Build Python package
        if: hashFiles('setup.py') != '' || hashFiles('pyproject.toml') != ''
        run: |
          python -m pip install --upgrade pip build
          python -m build
      
      - name: Upload Python package
        if: hashFiles('setup.py') != '' || hashFiles('pyproject.toml') != ''
        uses: actions/upload-artifact@v3
        with:
          name: python-package
          path: dist/
          retention-days: 7

  # ============================================================================
  # Deploy to Staging
  # ============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.deploy_environment == 'staging'
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
      
      - name: Deploy to staging
        id: deploy
        run: |
          echo "Deploying to staging environment..."
          # ./dev deploy staging
          echo "url=https://staging.example.com" >> $GITHUB_OUTPUT
      
      - name: Smoke test
        run: |
          # curl -f https://staging.example.com/health || exit 1
          echo "Smoke test passed"
      
      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Staging deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          if_mention: failure

  # ============================================================================
  # Deploy to Production
  # ============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
      
      - name: Create backup
        run: |
          echo "Creating production backup..."
          # ./dev backup production
      
      - name: Deploy to production
        id: deploy
        run: |
          echo "Deploying to production environment..."
          # ./dev deploy production
          echo "url=https://example.com" >> $GITHUB_OUTPUT
      
      - name: Verify deployment
        run: |
          # curl -f https://example.com/health || exit 1
          echo "Production deployment verified"
      
      - name: Create release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false
      
      - name: Notify team
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          if_mention: always

  # ============================================================================
  # Cleanup
  # ============================================================================
  cleanup:
    name: Cleanup Resources
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Clean up artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            docker-image
            python-package
      
      - name: Prune old Docker images
        run: |
          docker system prune -af --volumes || true