# Terminal Automation Framework CI/CD Pipeline
# Following Google/Meta best practices for shell automation
# 
# Key features:
# - Matrix strategy for multiple macOS versions
# - Homebrew dependency caching
# - Google Shell Style Guide enforcement
# - Meta-style fail-fast behavior with parallel execution
# - Comprehensive testing and validation

name: Terminal Automation Framework CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run nightly at 2 AM UTC (Meta-style continuous validation)
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allow manual triggering

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  # Global environment variables (Google-style configuration)
  LOG_LEVEL: INFO
  HOMEBREW_NO_AUTO_UPDATE: 1
  HOMEBREW_NO_ANALYTICS: 1

jobs:
  # Job 1: Primary macOS testing with matrix strategy
  framework-test:
    name: Framework Testing (macOS ${{ matrix.version }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    
    strategy:
      fail-fast: false  # Meta-style: Continue other tests if one fails
      matrix:
        include:
          - os: macos-13
            version: "13"
          - os: macos-14  
            version: "14"
          - os: macos-latest
            version: "latest"
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: System information
        run: |
          echo "🍎 macOS Version: $(sw_vers -productVersion)"
          echo "🏗️ Architecture: $(uname -m)"
          echo "🐚 Shell: $SHELL"
          echo "📁 Working Directory: $PWD"
        
      - name: Cache Homebrew packages
        uses: actions/cache@v3
        with:
          path: |
            ~/Library/Caches/Homebrew
            /opt/homebrew/Cellar
            /opt/homebrew/Caskroom
          key: ${{ runner.os }}-${{ matrix.version }}-brew-${{ hashFiles('**/Brewfile') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.version }}-brew-
            ${{ runner.os }}-brew-
        
      - name: Bootstrap development environment
        run: |
          echo "🚀 Bootstrapping development environment..."
          chmod +x ./dev
          ./dev bootstrap
          
      - name: System health check
        run: |
          echo "🏥 Running comprehensive system health check..."
          ./dev doctor
          
      - name: Install testing framework
        run: |
          echo "🧪 Installing BATS testing framework..."
          brew install bats-core
          
      - name: Run local CI pipeline
        run: |
          echo "🔄 Running full CI pipeline (Google/Meta-style)..."
          ./dev ci

  # Job 2: Shell script quality checks (Google Shell Style Guide)
  shell-quality:
    name: Shell Script Quality Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install linting tools
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck curl
          
          # Install shfmt (Google-recommended formatter)
          curl -sSLo /tmp/shfmt https://github.com/mvdan/sh/releases/download/v3.7.0/shfmt_v3.7.0_linux_amd64
          sudo mv /tmp/shfmt /usr/local/bin/shfmt
          sudo chmod +x /usr/local/bin/shfmt
          
      - name: ShellCheck analysis (Google Shell Style Guide)
        run: |
          echo "🔍 Running ShellCheck analysis..."
          # Lint all shell scripts with strict Google standards
          find . -name "*.sh" -type f | xargs shellcheck -S warning
          shellcheck -S warning ./dev
          echo "✅ All shell scripts pass Google Shell Style Guide checks"
          
      - name: Shell formatting validation  
        run: |
          echo "📝 Validating shell script formatting..."
          # Check formatting without modifying files (fail if not formatted)
          shfmt -d -i 2 -ci scripts/ dev
          echo "✅ All shell scripts are properly formatted"

  # Job 3: Integration tests (Meta-style comprehensive testing)
  integration-tests:
    name: Integration & End-to-End Tests
    runs-on: macos-latest  
    needs: [shell-quality]  # Run after quality checks pass
    timeout-minutes: 20
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup test environment
        run: |
          echo "🔧 Setting up integration test environment..."
          chmod +x ./dev
          
      - name: Test framework bootstrap process
        run: |
          echo "🚀 Testing complete bootstrap process..."
          ./dev bootstrap
          
      - name: Test Git integration
        run: |
          echo "🔄 Testing Git operations..."
          git config user.name "CI Integration Test"
          git config user.email "ci-test@automation-framework.dev"
          ./dev git:setup "CI Integration Test" "ci-test@automation-framework.dev"
          
      - name: Test package management operations
        run: |
          echo "📦 Testing package management..."
          ./dev install jq  # Should already be installed, but test the command
          ./dev update
          ./dev cleanup
          
      - name: Test code quality tools
        run: |
          echo "🔍 Testing code quality tools..."
          ./dev format
          ./dev lint
          
      - name: Test complete CI pipeline
        run: |
          echo "🔄 Testing complete CI pipeline..."
          ./dev ci
          
      - name: Test error handling
        run: |
          echo "🚨 Testing error handling..."
          # Test invalid commands
          if ./dev invalid-command 2>/dev/null; then
            echo "❌ Error handling failed - invalid command should fail"
            exit 1
          else
            echo "✅ Error handling working - invalid command properly rejected"
          fi