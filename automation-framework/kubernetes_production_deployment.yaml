---
# Kubernetes Production Deployment for Aioke
# Following Google GKE, Amazon EKS, and Azure AKS best practices
apiVersion: v1
kind: Namespace
metadata:
  name: aioke-production
  labels:
    name: aioke-production
    environment: production
    
---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: aioke-config
  namespace: aioke-production
data:
  APP_ENV: "production"
  LOG_LEVEL: "info"
  ENABLE_METRICS: "true"
  ENABLE_TRACING: "true"
  SRE_SLO_AVAILABILITY: "99.9"
  SRE_SLO_LATENCY_P99_MS: "200"
  FEATURE_FLAGS: |
    {
      "progressive_rollout": true,
      "canary_deployment": true,
      "circuit_breaker": true,
      "rate_limiting": true
    }

---
# Secret for sensitive data (use external secret manager in production)
apiVersion: v1
kind: Secret
metadata:
  name: aioke-secrets
  namespace: aioke-production
type: Opaque
stringData:
  JWT_SECRET: "your-jwt-secret-here"
  API_KEY: "aioke_6F4gMU1CM6cEpgacWI6L-CiQ46zOp6dHI_ieFwfV6II"
  DATABASE_URL: "postgresql://user:pass@postgres:5432/aioke"

---
# PodDisruptionBudget for high availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: aioke-pdb
  namespace: aioke-production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: aioke

---
# Deployment with best practices
apiVersion: apps/v1
kind: Deployment
metadata:
  name: aioke-backend
  namespace: aioke-production
  labels:
    app: aioke
    component: backend
    version: v2.0.0
spec:
  replicas: 3  # Minimum 3 for HA
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0  # Zero-downtime deployment
  selector:
    matchLabels:
      app: aioke
      component: backend
  template:
    metadata:
      labels:
        app: aioke
        component: backend
        version: v2.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      # Security context (principle of least privilege)
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
        
      # Service account for RBAC
      serviceAccountName: aioke-backend
      
      # Anti-affinity for spreading pods across nodes
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - aioke
              topologyKey: kubernetes.io/hostname
              
      containers:
      - name: aioke
        image: ghcr.io/your-org/aioke:v2.0.0
        imagePullPolicy: Always
        
        # Container security
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
            
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
          
        # Environment variables
        envFrom:
        - configMapRef:
            name: aioke-config
        - secretRef:
            name: aioke-secrets
            
        # Resource limits (prevent noisy neighbor)
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
            
        # Health checks (Google SRE best practice)
        livenessProbe:
          httpGet:
            path: /health/live
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
          
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
          
        # Startup probe for slow-starting containers
        startupProbe:
          httpGet:
            path: /health/startup
            port: http
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 30
          
        # Volume mounts
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/cache
          
      # Init container for migrations
      initContainers:
      - name: migrate
        image: ghcr.io/your-org/aioke:v2.0.0
        command: ['python', 'migrate.py']
        envFrom:
        - secretRef:
            name: aioke-secrets
            
      # Volumes
      volumes:
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir: {}

---
# Service for load balancing
apiVersion: v1
kind: Service
metadata:
  name: aioke-service
  namespace: aioke-production
  labels:
    app: aioke
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"  # For AWS
    service.beta.kubernetes.io/azure-load-balancer-internal: "false"  # For Azure
spec:
  type: LoadBalancer
  selector:
    app: aioke
    component: backend
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP
  sessionAffinity: ClientIP  # Sticky sessions
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800

---
# HorizontalPodAutoscaler for auto-scaling
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: aioke-hpa
  namespace: aioke-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: aioke-backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300  # 5 minutes
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60  # 1 minute
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30

---
# NetworkPolicy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: aioke-network-policy
  namespace: aioke-production
spec:
  podSelector:
    matchLabels:
      app: aioke
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: aioke-production
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 443  # HTTPS for external APIs
    - protocol: TCP
      port: 53   # DNS
    - protocol: UDP
      port: 53   # DNS

---
# ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: aioke-metrics
  namespace: aioke-production
spec:
  selector:
    matchLabels:
      app: aioke
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics

---
# Ingress with TLS
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: aioke-ingress
  namespace: aioke-production
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/limit-rps: "10"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - api.aioke.com
    secretName: aioke-tls
  rules:
  - host: api.aioke.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: aioke-service
            port:
              number: 80

---
# ServiceAccount for pod identity
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aioke-backend
  namespace: aioke-production
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT:role/aioke-backend  # For AWS
    azure.workload.identity/client-id: "CLIENT_ID"  # For Azure

---
# Role for RBAC
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: aioke-backend-role
  namespace: aioke-production
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]

---
# RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: aioke-backend-rolebinding
  namespace: aioke-production
subjects:
- kind: ServiceAccount
  name: aioke-backend
  namespace: aioke-production
roleRef:
  kind: Role
  name: aioke-backend-role
  apiGroup: rbac.authorization.k8s.io